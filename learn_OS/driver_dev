* device drivers
- make a particular piece of hardware respond to a well-defined internal programming interface
- they hide completely the details of how the device works
- mapping the set of standardized calls that are independent of the spcific driver to device-specific operations that act on real hardware 

* a device driver emphasizes on providing mechanism, not policy
- "what capabilities are to be provided" (mechanism)
- "how those capavilitiess can be used" (policy)

* splitting the kernel
- process management
  - create and destroy processes
  - input and output for processes
  - communication among processses
  - scheduler, how processes share the CPU
- memory management
  - virtual address space
- filesystems
- device control
- networking
  - incoming packets aree asynchronous events
  - collect, identify and dispatch packets before any process

* module
- each piece of code that can be added to the kernel at runtime
- each module is made up of object code 
  - not linked into a complete executable
  - that can be dynamically linked to the running kernel by insmod program aand unlinked by the rmmod program

* character devices
  - a char device is one that can be accessed as a stream of bytes (like a file)
  - such a driver usually implements at least the open, close, read and write system calls
  - the text console (/dev/console) and the serial ports (/dev/ttyS0) are examples of char devices, as they are weell represented by the stream abstraction
  - you can always move back and forth in thee regular file
  - whereas most char devices are data channels, you can only acceess sequentially
    - frame grabbers using mmap aand lseek

* block devices
  - block devices are accessed by filesystem nodes in the /dev directory
  - it can host a filesystem
* network interfaces
  - exchange data with other hosts
  - a network interface is in charge of sending and receiving data packets,
    - driven by the network subsystem of the kernel
    - without knowing how individual tansactions map to the actual packet being transmitted
    
* kernel module
- pieces of code that can be loaded and unloaded into the kernel upon deemand
- they extend the functionality of the kernel without the need to reboot the system
- lsmod, gets its information by reading the file/proc/module
- kernel modules must have at least two functions
  - a start/initialization function,called when the module is insmod ed into the kernel
    - init_module()
  - an end/cleanup function, called before it is rmmod ed
    - cleanup_module()
  - include linux/module.h

- printk()
  - a logging mechanism for the kernel
  - is used to log infomation or give warnings
  - /var/log/messages (file names varies between Linux distribution)

* kernel modules versus applications
  - for applications
    - it can cal functions it doesn't define
    - the linking stage resolves external references using the appropriate library of functions
      - eg, printf is defined in libc
  - a kernel module
    - has to be careful with releasing resources and cleaning up
    - is only linked to the kernel
    - the only functions it can call are the ones exported by the kernel
    - there are no libraries to link to
      - eg, printk()
    - <stdarg.h> being the only exception header file
      - it is actually part of the kernel itself
  - a kernel module runs in kernel space
  - an application runs in user space
    - different privilege levels
    - their own address space in memory
  - applications are laid out in virtual memory with a very large stack area
    - the stack is used to hold the function call history and all automatic variables created by the currently active funtion
  - the kernel module has very limited stack

- vermagic.o is used to check the processor-specific configuration
  - when build, it links the kernel module against vermagic.o from the current kernel tree

- initialization functions should be declared static, 
  - since they are not meaent to be visible otside the specific file
  - without module_init(), the init function would never be called

- module parameters
  - insmod hello howmany=10 whom="mom"
  - module_param(howmany,int,S_IRUGO);
  - module_param(whom,charp,S_IRUGO);
  - types supported for module parameters:
    - bool
    - invbool, the invbool type inverts the value of a bool
    - charp, a char pointer value
    - int, long, short, uint, ulong, ushort
  - module_param_array(name,type,num,perm);
    - perm is the usual permission value, determines who can acceess thee representation of the module parameter in sysfs

* kernel-space drivers and user-space drivers
- the advantages of user-space drivers are:
  - the full C library can be linked in
  - a conventioanl debugger on the driver code, instead of deugging a running kernel
  - user memory is swappable
- drawbacks for user-space driver:
  - interrupts are not available in user space
  - direct access to memory is possible only by mmapping /dev/mem, only a privileged user can do that
  - access to I/O ports is avaiable only after calling ioperm or iopl
  - response time is slower

* scull, simple character utility for loading localities
  - a char driver

* understanding the structure of a Linux kernel device driver
- providing an infrastructure to write and run devicee driveers is part of an OS's kernel responsibility
- there are a few kernel APIs that could be used to export an interface to userspace in the filesystem, /dev, /sys
- device nodes
  - one of the interfaces that could be used,
  - where files are exporteed to users in /dev in the for of char or block device files
    - char type, a device exchange bytes or stream of bytes 
    - block type, specific amount gated by the block
- implement a char driver
  1. allocate the device number(major/minor)
    - register_chrdev_region()
    - alloc_chrdev_region()
  2. implement the file operation(open, read, write, ioctl, etc)
  3. register the char driver in the kernel with cdev_init() and cdev_add()
  - major device number,
    - tells which driver it uses
  - minor device number,
    - tells which device exactly used of that device type

cat /proc/devices
mknod /dev/lede c 244 0

- insmod used to load a module
- modprob, also looks for any dependency

* permission denied for echo 1 > /dev/led
- solution: sudo chmod 666 /dev/led

https://www.youtube.com/watch?v=pIUTaMKq0Xc&ab_channel=TheLinuxFoundation









