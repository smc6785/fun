
low-level file input and output file descriptors
file descriptor(fd)
  - 0 represents standard input
  - 1 represents standard output
  - 2 represents standard error
int open(const char* path, int flag);
int close(int fd);

ssize_t write(int fd, const void* buf, size_t nbytes);

char hello[] = "Hi Mom";
it ends with \0

char *str = malloc(4);
str[0] = 'h';
str[1] = 'e';
str[2] = 'y';
str[3] = '\0';
free(str) to RAM

sockets
sockers are the low level endpoint used for processing information across a net work
common networking protocols like HTTP, and FTP rely on sockets underneath to make connections

client socket workflow
the client socket if created with a socket[] call, types of sockets
connect to a remote address with the connect[] call, IP and the port
retrieve data with the recv[] call

- creating a scoket, a socket descriptor
to perform network I/O,
call the socket function to create a apecific type of scket by specifiying the type of communication protocol desired, protocol family, etc
#include <sys/socket.h>
int socket(int domain, int type, int protocol);

- binding the scoket
sockets do not have a complete address in the beginning to start transferring data
so we bind a socket to a port
the process of allocating a port number to a socket is called binding
binding a request to TCO/IP indicating that it is ready to receive/send information:w
int bind(int sockfd, struct sockaddr *myaddr, socklen_t addrlen);

- listen, listen for connection requests
the process of converting an unconnected socket into a passive socket
indicating tht the kernel should accept incoming connection requests directed to this socket
int listen(int sockfd, int backlog);

- accept, accept a connection request
transition of the connect request from listen() method to an actual socket
after accepting the request, the data can be finallly transferred between the nodes
int accept(int sockfd, struct sockaddr *addr, socklen_t* addrlen);

- connect, attempting to establish a connection 
the implementation of requesting to connect is very simple, unlick listening and accepting a socket
int connect(int sockfd, struct sockaddr* serv_addr, socklen_t addrlen);

socket domain
- PF_XXX, protocol family
  - PF_INET, protocol family internet IPv4
  - PF_INET6, protocol family internet IPv6
- AF_XXX, address family(each address family supports multiple protocol families
  - AF_INET, address family internet IPv4
  - AF_INET6, address family internet IPv6

socket type
- SOCK_STREAM, TCP(transmission control protocol, two way handshaking
  connection oriented, stable
- SOCK_DGRAM, UDP(user datagram protocol, doesnt shank any hands)
  connectionlesss, fast

socket protocol, sub protocol of the selected socket type
  cat /etc/protocols

server socket workflow
socker() -> bind() -> listen() -> accept()

client socket workflow
socker() -> connect() -> recv()

===
a TCP-based HTTP client written in C, transmission control protocol
- find n http service which responds in the data you need
- learn socket programming in C
- create a TCP socket and send a HTTP request to that service you found in 1
- read the response from the socket to qcquire your data

===
internet address + port -> socket 

- internet (logical) address
  an internet protocol address (IP address or logical address) is a numerical label assigned to each device connected to a computer network that uses the internet protocol for communication

  classful address or IP address
  133.122.123.211, 4 bytes
    133 -> net id
    122.123.211 -> host id
  subnet mask decides the portion

  classless IP networ
  CIDR Notation

- port number
  port number is the logical address of each application or process that uses a network or the internet to communicate
  a port number uniquely identifies a netwoek-based appliction on a computer

  port 80 for web brower, it uses port 80 to reach the server by default
  172.217.0.174:80
  
===
internet address representation in C
  - specify a IPv4 address
  - set the port address in both ends of the socket, meaning that sending and receiving sockets must have the same port number
  - struct sockaddr_in -> socket address internet
    - sa_family = socket address family
  - sin_xxxxx -> socket internet xxxxx, "xxxxxx" can be family, port, address)
  - struct sockaddr_in
    {
      sa_family_t  sin_family;
      // sin_family, address family(almost always AF_INET)
      uint16_t     sin_port;
      // sin_port, port number
      struct       sin_addr;
      // sin_addr, IPv4 address
      char         sin_zero[8];
      // no special meaning, not used
    };

    struct in_addr
    {
      in_addr_t    s_addr;
    };

    struct sockaddr
    {
      sa_family_t  sin_family;
      char sa_data[14];
    };

  - becasue of little/big endian choice, we conert the port number(short) and IPv4 address(long) using
    - unsigned short htons(unsigned short);
    - unsigned short ntohs(unsigned short);
    - unsigned long htonl(unsigned short);
    - unsigned long ntohl(unsigned short);
    - h: host, n: network, s: short, l: long

- internet address representation
  - allowing any client to make connection requests
  - INADDR_ANY, ip address is not set, it can be any internet address
      manily for server socket to accept any client's request

