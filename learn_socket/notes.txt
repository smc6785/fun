
low-level file input and output file descriptors
file descriptor(fd)
  - 0 represents standard input
  - 1 represents standard output
  - 2 represents standard error
int open(const char* path, int flag);
int close(int fd);

ssize_t write(int fd, const void* buf, size_t nbytes);

char hello[] = "Hi Mom";
it ends with \0

char *str = malloc(4);
str[0] = 'h';
str[1] = 'e';
str[2] = 'y';
str[3] = '\0';
free(str) to RAM

sockets
sockets are the low level endpoint used for processing information across a network
common networking protocols like HTTP, and FTP rely on sockets underneath to make connections

client socket workflow
the client socket if created with a socket[] call, types of sockets
connect to a remote address with the connect[] call, IP and the port
retrieve data with the recv[] call

- creating a scoket, a socket descriptor
to perform network I/O,
call the socket function to create a apecific type of scket by specifiying the type of communication protocol desired, protocol family, etc
#include <sys/socket.h>
int socket(int domain, int type, int protocol);

- binding the scoket
sockets do not have a complete address in the beginning to start transferring data
so we bind a socket to a port
the process of allocating a port number to a socket is called binding
binding a request to TCO/IP indicating that it is ready to receive/send information:w
int bind(int sockfd, struct sockaddr *myaddr, socklen_t addrlen);

- listen, listen for connection requests
the process of converting an unconnected socket into a passive socket
indicating tht the kernel should accept incoming connection requests directed to this socket
int listen(int sockfd, int backlog);

- accept, accept a connection request
transition of the connect request from listen() method to an actual socket
after accepting the request, the data can be finallly transferred between the nodes
int accept(int sockfd, struct sockaddr *addr, socklen_t* addrlen);

- connect, attempting to establish a connection 
the implementation of requesting to connect is very simple, unlick listening and accepting a socket
int connect(int sockfd, struct sockaddr* serv_addr, socklen_t addrlen);

socket domain
- PF_XXX, protocol family
  - PF_INET, protocol family internet IPv4
  - PF_INET6, protocol family internet IPv6
- AF_XXX, address family(each address family supports multiple protocol families
  - AF_INET, address family internet IPv4
  - AF_INET6, address family internet IPv6

socket type
- SOCK_STREAM, TCP(transmission control protocol, two way handshaking
  connection oriented, stable
- SOCK_DGRAM, UDP(user datagram protocol, doesnt shank any hands)
  connectionlesss, fast

socket protocol, sub protocol of the selected socket type
  cat /etc/protocols

server socket workflow
socker() -> bind() -> listen() -> accept()

client socket workflow
socker() -> connect() -> recv()

===
a TCP-based HTTP client written in C, transmission control protocol
- find n http service which responds in the data you need
- learn socket programming in C
- create a TCP socket and send a HTTP request to that service you found in 1
- read the response from the socket to qcquire your data

===
internet address + port -> socket 

- internet (logical) address
  an internet protocol address (IP address or logical address) is a numerical label assigned to each device connected to a computer network that uses the internet protocol for communication

  classful address or IP address
  133.122.123.211, 4 bytes
    133 -> net id
    122.123.211 -> host id
  subnet mask decides the portion

  classless IP networ
  CIDR Notation

- port number
  port number is the logical address of each application or process that uses a network or the internet to communicate
  a port number uniquely identifies a netwoek-based appliction on a computer

  port 80 for web brower, it uses port 80 to reach the server by default
  172.217.0.174:80
  
===
internet address representation in C
  - specify a IPv4 address
  - set the port address in both ends of the socket, meaning that sending and receiving sockets must have the same port number
  - struct sockaddr_in -> socket address internet
    - sa_family = socket address family
  - sin_xxxxx -> socket internet xxxxx, "xxxxxx" can be family, port, address)
  - struct sockaddr_in
    {
      sa_family_t  sin_family;
      // sin_family, address family(almost always AF_INET)
      uint16_t     sin_port;
      // sin_port, port number
      struct       sin_addr;
      // sin_addr, IPv4 address
      char         sin_zero[8];
      // no special meaning, not used
    };

    struct in_addr
    {
      in_addr_t    s_addr;
    };

    struct sockaddr
    {
      sa_family_t  sin_family;
      char sa_data[14];
    };

  - becasue of little/big endian choice, we conert the port number(short) and IPv4 address(long) using
    - unsigned short htons(unsigned short);
    - unsigned short ntohs(unsigned short);
    - unsigned long htonl(unsigned short);
    - unsigned long ntohl(unsigned short);
    - h: host, n: network, s: short, l: long

- internet address representation
  - allowing any client to make connection requests
  - INADDR_ANY, ip address is not set, it can be any internet address
      manily for server socket to accept any client's request

      # server
      - SW, program that listens for requests and responds
      
      # client 
      - SW, program that makes reuqests of other programs
      
      # netowrk
      - multiple computers connected to each other
      - data can be sent from any system on the network to any other
      - a network is owned and controlled by a person or organiation
      
      # internet
      - network of networks
      - multiple networks connected together by routers
        - private worknets
        - internet service provider
        - backbone networks, tele communication companies
      
      
      # IP, internet protocol
      - data sent in packets
      - each host and router hasss a unique 32-bit address, IPv4
        - 128-bit address, IPv6
      - router, routing table
        = CIDR, classless inter-domain routing
        - BGP, border gateway protocol
      - modem, short for modulator and de-modulator
        - converts digital signals to analog signals and vice-versa
        - connected to ISP networks and it provides an IP
      - access router
        - allows multiple devices to share one IP addess using network address translation
        = wireless Ethernet connectivity
        - firewall, unwanted traffics
      
      # DNS, domain name system
      - a system of resolving names to IP addresses
      - top-level domains:
        com net org edy mil gov uk ca de etc.
        each controlled by a designated authority
      - most top-level authorities let people lease subdomains:
        google.com, yahoo.com, wikipedia.org, etc.
      - domain name owner determines IP address to which that name resolves
      - DNS server: program which your computer asks to resolve domain names
        - keeps a local cache of the global registry 
        = and periodically checks for updates from the top-level authorities
      
      # URL, uniform resource locator
      - string of text designating location of a thing on the internet
        (nature of the thing)://host(the location, IP address or a domain name)/path(the thing)
      
      # layers
      - Application, HTTP(hyper-text transfer protocol), SMTP(email), etc
      - Transport, TCP, UDP
      - Internet, IP
      - Link, Ethernet (MAC, media access control), etc
      
      - Ethernet header + IP header + TCP header + application date
      
========
# tools
- nmap -p- 10.10.10.142
  - nc -vv 10.10.10.142 8091
    - JSON-RPC
    - curl -X POST --data '{"xyz"}' httpss://10.10.10.142:9810
  - curl httpss://10.10.10.142:9810
- nmap 10.10.10.142
  - Availiable ports
  - ftp 10.10.10.142
    - ftp> get anonymous.txt
  - nc -vz -u 10.10.10.142 30301
- tcpdump -X
- ifconfig
- :set paste
- otool
- xxd
- lldb
- g++ -Os
- g++ -O2

# HTTP server
- Transport layer
  - TCP, transport layer protocols
  - UDP, datagram protocol
  - SPC, sequenced packet exchange
- Socket
  - The mechanism OS provides to give programs access to the network.
  - It allows messages to be sent and received between applications onn different neworked machines
  - int server_fd = socket(domain, type, protocol);
  - Bind
    - Assigning a transport address to the socket(a port number in IP networking)
    - int bind(int socket, const struct sockaddr *address, sockelen_t address_len);
    - struct sockaddr_in
      - { sin_len
      -   sin_family
      -   sin_port
      -   sin_addr
      -   sin_zero[8] }
 - Listen
  - Listen tells a sockete that it should be capable of accespting incoming connections
  - int listen(int socket, int backlog);
  - int accept(int socket, struct sockaddr *restrict_address, socklen_t *restrict_address_len);  
- http://www.google.com:80/index.html
  - Port 80, file index.html, http protocol
      
# Network
- Copper wire
- Fiber Optics
  - FIber strand
  - Cladding
- Radio waves

# Ethernet
- Ethernet address, AKA, MAC address
- Multipoint data link protocol
- Preamble/SFD + Destination addr + Source Addr
  + Ethernet type + payload + frame check sequence
  - Ethernet type 
    - 0800: IP packet
    - 0860: APR

# PPP, point to point protocol
- PPP is for large ISP servers

# IP, Internet Protocol

# ICMP, internet control messgae protocol

# ARP, address resoltion protocol
- To find mac address of the router

# DNS servers
- Root servers maintained by IANA, internet assigned numbers authority.
  - dig, DNS lookup utility
  - SERVER: 192.5.6.30#53(192.5.6.30) 
    - Cache name servers from ISP.
    - dig www.facebook.com 
      - Will lookup from cache name server.
  - a.root-servers.net.	602950	IN	A	198.41.0.4
  - Information about how long can these IPs be cached.
- dig @198.41.0.4 www.facebook.com
  - Get authoritatives for .com 
    - ;; AUTHORITY SECTION:
    - com.			172800	IN	NS	a.gtld-servers.net.
    - a.gtld-servers.net.	172800	IN	A	192.5.6.30
    - a.gtld-servers.net.	172800	IN	AAAA	2001:503:a83e::2:30
- dig @192.5.6.30 www.facebook.com
  - ;; AUTHORITY SECTION:
  - facebook.com.		172800	IN	NS	a.ns.facebook.com.
  - a.ns.facebook.com.	172800	IN	A	129.134.30.12
- dig @129.134.30.12 www.facebook.com
  - ;; ANSWER SECTION:
    www.facebook.com.	3600	IN	CNAME	star-mini.c10r.facebook.com.
    star-mini.c10r.facebook.com. 60	IN	A	31.13.70.36
- dig @129.134.30.12 star-mini.c10r.facebook.com.
- com. -> facebook.com. -> c10rfacebook.com.
- Root server -> Top level domain server -> 
  Facebook naming server -> Facebook sub domain server

- IPv4 Address: 192.168.0.139
- Subnet Mask: 255.255.255.0
  - 34 ones, 8 zeros.
  - First 34 bits of this IP address describe the local network.
  - Last 8 bits describe a single device in this network.

- Router: 192.168.0.1
  - Default gateway to other IPs on the internet.

- netstat -rn -f inet


