# setup
- Download kernel source code
- Compile the kernel
- .config file under Linux
  - zcat /proc/config > .config
  - cp /proc/config.gz ./
    gunzip ./config.gz
    mv config .config
- make menuconfig, to edit the config file
- make xconfig, to edit the config file
- make oldconfig, for older confile file with a newer version of kernel
- uname -a, to see the current running kernel

# make kernel
- make -j8
  - nporc
- make module_install
  - ls /lib/modules/5.12.0-rc6-MANJARO/
- make install
  - ls /boot/
- cp /boot/vmlinuz /boot/vmlinz-$(make kernelversion)-$(uname -m)
- /boot/grub/grub.cfg
  - problem with editting this .config file:
    - update-grub would over write .config file
  - instead, edit /etc/grub.d/40_custom
- cat /etc/mtab

# make kernel module
- kernel header files
- make -C /lib/modules/$(uname -r)/build M=$(pwd)
- sudo insmod ./helloworld.ko
- sudo rmmod helloworld
- sudo dmesg -C, to clean kernel log ring buffer
- load kernel module in system start
  - /etc/modules-load.d/modules.conf
  - this would load modules with modprobe
  - modprobe is looking for modules in certain directory
  - move .ko under that directory

# module param
- int gpio_pin = 18;
  module_param(gpio_pin, int, 0);
  MODULE_PARM_DESC(gpio, "GPIO-pin ID";

# char device/ character device
- cat /proc/devices, device number
- dev_t devno;
  devno = MKDEV(137, 0);
  // 137 major number, 0 minor number
  register_chrdev_region(devno, 1, "gpio_morse");
  unregister_chrdev_region(devno, 1);
- struct file_operations my_fops = {
    ...
  };
  struct cdev my_cdev;
  cdev_init(my_cdev, &my_fops);
  cdev_add(&my_cdev, devno, 1);
- mknod /dev/gpio_morse c 137 0
- each "hello" > /dev/gpio_morse

========
# busybox
- wget busybox and linux kernel
- make linux kernel
- make busybox
  - systems can not load dynamically linked library
  - we need to create a static build for busybox
  - musl-gcc ?
- busybox is using arg 0 to check its own file name
  - rename busybox to echo
  - ln -s /bin/busybox echo
  - ./echo "hello world"
  - busybox --list
- find . | cpio -o -H newc > ../initrd.img
- qemu-system-x86-64 -kernel bzImage -initrd initrd.img -nographic -append 'console=tty50'

========
# kernel
- MMU, memory management unit 
  - It is the hardware responsible for implementing virtual memory
  - TLB, tranlation lookaside buffer
    - A list of mappings from virtual to physical address
    - Part of MMU
    - TLB is consulted by the MMU when the CPU accesses a virtual address
      - If the virtual address is in TLB,
        - MMU can look up the physical resource
      - If the virtual address is not in TLB, or the permissions are insufficient
        - MMU will generate a page fault exception and interrupt the CPU
          - A page fault is when software attempts to use an invalid virtual address
  - MMU operates on basic units of memoory called pages
    - Page size varies by architecutre
  - A page is a unit of memory sized and aligned at the page size
  - A page frame, or frame refers toa page-sized and page-aligned physcial memory block
    - pfn, page frame number
  - A memory map for a process will contaion many mappings
  - A mappiing often covers multiple pages
  - The TLB holds each mapping virtual address, physical address, permissions
  - Rach process has its own set of mappings
    - The same virtual addresses in two diffrent processes 
      will likely be used to map different physical addresses
- In Linux, both kernel and user space uses virtual addresses
  - The upper part is used for the kernel
  - The lower part is used for user space
  - On 32-bit, by default the split is at 0xC0000000
    - Kernel 1GB, 0xFFFFFFFF to 0xC0000000
      - Kernel address space is the area above CONFIG_PAGE_OFFSET
    - User space 3GB, 0x00000000 to 0xC0000000
  - On 64-bit, the spli varies by architecture
    - 0x8000000000000000 for ARM64
    - 0xFFFF880000000000 for x86_64
  - three kinds of virtual addresses
    - Kernel logical address
      - Normal address space of the kernel
      - kmalloc()
      - They are a fixed offset from their physical addresses
        - Virtually-contiguous regions, also physically contiguous
        - Virtual: 0xC0000000 <-> Physical: 0x00000000
      - __pa(x) and __vs(x)
      - Contains allocated memory and kernel stacks(per process)
      - Kernel logical memory can never be wapped out
      - For 32 bit large RAM system:
        - Low memory
          - Physical memory which has a kernel logical address
          - Physically contiguous
        - High memory
          - Physical memory beyond 806MB (1GB- 104MB(for virtual kernel memory))
          - Has no logical address
          - Not physically contiguous
          - only on 32-bit
    - Kernel virtual address
      - The addresses in the region above the kernel logical address mapping
      - Also called vmalloc() area
      - Non-contiguous memory mappings
        - Large buffers which could be potentially be too large to find contiguous memory
      - Memory-mappped I/O
        - Map peripheral devices into kernel
          - PCI, Soc IP blocks
        -- ioremap(), kmap()
    - User virtual address
      - Memory used by user space programs
      - All addresses below PAGE_OFFSET
      - Not contiguous, can be swapped out, can be moced
      - Only used portions of RAM are mapped
      - Each process has its own memory map
        - struct mm, pointers in task_struct
    - Pages, divide physical memory in fixed-size blocks
      - Typical page size 2^p: 4KB - 16 KB
      - virtual page number | offset
# virtualization
- A running prgarm plus its context is called a process
  - All register state, stock pointer, program counter
  - Program code, stack and heap
- A special control process manages all other processes
  - Control process runs in kernel mode or protected mode
  - Controller performs context-switches
    - Suspend the currently running procesds, copy context to memory
    - Copy another process's context into running area and then resume it

