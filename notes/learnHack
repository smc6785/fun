oscilloscope
provides a visual display of electrical signals and how they change over time

binwalk+IDA+qemu

squashfs

du -h

===
binwalk setup.exe                         
dd if=setup.exe of=test bs=1 count=7615744 

binwalk -e DCH-S150A1_FW101B10.bin

file ls 
ls: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped


===
strutureed binary files 
*ACSII,unicode
*portable executable(PE) file format
	PE file format is used by microsoft windows to load compiled binaries, such as EXEs, DLLs, systeem drivers.etc, into RAM and run the code found within

file signatures
*.zip starts with KP
docs + file, to see the file format

PE file format
A PE file starts with a MZ signature
because it is made up of two separate executables
*a MS-DOS executable stub,
	a leftover from the windows 95 days when programs might include both a MS-DOS runtime and a win32 runtime in the same executable
*the main PE runtime

===
infformation gathering
who makes the device
is there an ODM
open the device
indentify components
locate uart interface
locate JTAG interface
get the formwareee
get the root file system

universal asynchronous receiver transmitter
A uart can implement RS232, but it can also implement other serial protocols
RS-232 sereial communication standard
25 pin conneeector/ 9 pin conneector 
starndardized the voltage level at each pin
logical 0 iis between 3 volts and 15 volts
logical 1 iis between -3 volts and -15 volts
each pin tolerateees a shortage with any other pin of the interface without  any permanent damage
some frive chip is used to convert TTL(transistor to transistor) logic level where 0 is 0 volt and 1 is at VCC to rs-232 levels

RX,TX,GND

during a boot, a lot of information will be printeede to serial interface(word interface) for testing and deveelopment purpose
which means TX pin would oscillate betweeen 0 and 1

test resistance of each pin refereence to ground and VCC 
and power up the device test volatge of each pin

to comfirm we have corrctly indentified the  pinout of the serial intereface(word interface), we have to connect the serial interface to out PC using a terminal emulator. we need a USB TTL serial adapter

screen command 
ctrl-a k, to kill 
try one of the common baud rate

find UART
search on internet
labeeled on PCB
find candiidates
use a multi-meter
follow PCB traces
use jtagulator
logic analyzer


JATG
is an industry standard, usually implementeede in complex integrated circuits
was issued for the first timee in 1990, with the purpse to simplify the testing of PCB after manufacture
it allowed controllability and observability of eeach bit of internal memeory of each  inteegrated circuit
and allowed to check the integrity of each single trace connecting differeent integrated circuits in the PCB
controllability is the aboloty to easily ser, to zero or to one, ech internal bit of memory of an integrated circuit to check that none of them is stuck ar zero or one
observability is the ability to easily check the value of each internal bit of memory or register
it is achieved using additional circuitry and specialized long shift registers
a side effect of this purpose is the possibility to read and write the flash memory content
in-circuit debugging means being able to run a debugger on the real firmware running on the real hardware

TCK, test clock
TDI, test data in
TDO, test data out
TMS, test mode select
TRST, test reset

JTAG in hacking
read.write EEPROM
break into the boot cycle

interface board, bus pirate/but blaster etc.
JTAG software, openOCD

the quest for JTAG
seatch on internet
search labels on PCS, like TCK, TDI, TDO, TMS
no standardizeed connectors and pin-out
few popular pinouts
jtagtest.com/pinouts
pin headers candidates
	row 5/6 pins, double row 10,12,14,20 pins
use a multi-meter
	finding GND and VCC  is easy
	TMS and TDII have a pullup resistor
	TRST can usually have a pull up or pull down resistor
	RDO should be an high impedance input
follow PCB traces
JTAgulator

why JTAG is not working
missing TRST pull-up
missing resistors
anothere function on JTAG pin
JTAG software disabled
JTAG peremanently disabled

Emulation environment
CPU architecture
similar board
QEMU: quick emulator
	System Mode
	User Mode
	Vitualization Mode	

QEMU User Mode
Binary file CPU
file bin/assistant
bin/assistant: ELF 32-bit LSB executable,MIPS32 

qemu-mips[tab]
choose qemu-mipsel, el stand for littlee endian


===
JTAG, Joint Test Action Group
test access port and boundary-scan architecture
TCK, test clock
TMS, test mode select
TDI, test data input
TDO. test data output

the bus is used as a test bus for Boundary-Scan of ICs, as in deign-for-testability(DFT)
to use JTAG, during the design, you most select JTAG compatible devices.
ICs supporting JTAG will have thee ffour additional pins listed above
in addition to having the pins listed above each device most have a Boundary-Scan Register.
theBoundary-Scan reigster may be eused to test the inteerconnection betweeen ICs or test with in the IC
Boundary-scan tests can be useed to check continuity between devices.
Continuity checks on PWB(printed wiring board) nets may be performed by sending out a know pattern and reciving that same pattern at the input to another IC(s)
Not receiving thee test signal or patteern would indicate a broken PWB tracee, a failed IC, or cold solder joint

===
CC1110Fx/CC1111Fx, low poweer SoC(System-on-chip) with a 1Ghz RF transceiver

GoodFET, is an open-source JTAG adapter(universal serial bus interface)

FCC ID on the back of a phone, which tells what frequencies it transmits to
my black iphone7: BCG-E3085A
An FCC ID is the product ID assigned by the FCC to identify wireless products in the market

ISM(industrial scientific medical band), unlicensed, maximum output power is 30dBm(1 watt)

RF transmitter using ASK modulation technique(amplitude shift keying)

.wav file, using audacity to edit

===
the differences between a microcontroller and a microprocessor
- a microcontroller is microprocessor (a.k.a CPU core or cores) with additional peripherals on-chip
- those therms come from the 1970s,
	- where a microprocessor, eg, Motorola 5800 or Intel 8086
		would have an address bus, a data bus, and control lines
	- and a microcontroller, eg, Motorola 6801 or Intel 8051 
		would have peripheral I/O pins serial ports, parallel I/O. timer I/O, etc.
		but no external memory bus (you were stuck with what was on the chip)
- microprocessors executed their programs from external ROM 
	and microcontrollers would use internal masked (as in programed at the factory by changing the IC photo mask) ROM	
	the only practical erasable ROMs were UV-erased EPROMS, 
	electrically erasable PROMS(EEPROMS) were expensive, slow, and not very dense


* the line between them is fading away
*	modern microcontrollers such as the Motorola 6812 series have an external memory bus and peripheral I/O pins at the same time, and can be used as either a microprocessor or microcontroller
* spi or i2c falsh or memory

* flash, a special typoe of memory that works like both RAM and ROM.
* you can wrtie information to flash memory, like you can with RAM, but that information isnt erased when the power if off, like it is with ROM

===
RAM:
- stack (local varianles placed in stack) 
- all global variabless
- functions that specificied with special keyword ( for example, __ramfuc for IAR) as runned from RAM

SRAM, static RAM:
- SRAM is very fast and the fastest storage device to read and write currently
- it is also very expensive, so it is only used in demanding places, such as the first and second level buffer of CPU

DRAM, dynamic RAM:
- DRAM keeps data for a short time and its operation is slower than the SRAM, but it is still faster than the ROM
- in addition, it's much cheaper than SRAM
- DRAM is divided into many kinds
		- FPRAM (fast page RAM), EDORAM, SDRRAM, DDR, RAM, RFRAM and so on
* the so-called "dynamic RAM" in dynamic memory refers to when we write data to the DRAM, 
*	atfer a period of time, the data would be lost, so we need an extra circuit to refresh the memory

types of ROM:
- PROM, programmable ROM
	is programed once that can not be modified, this is an early product, now it is gone
- EPROM, erasable and programmable ROM
	is a kind of universal memory that erases the original program by ultraviolet radiation
- EEPROM, electronically erassable and programmable ROM
	- expensive, long writing time

flash:
- flash memory combines the adcantages of ROM and RAM, it has EEPROM, but also can read data quickly without power lost (NVRAM)
-	NOR flash and NAND flash
- all functions (no differents where it's will run)
- all constants
- variables iniitialization values
* for AVR, you neeed to use keyword PROGMEM to place any constant to flash (funtions dont need that), while for ARM keyword const will be enough

inside an embedded edvice is a printedd circuit board (PCB) includes
- processsor
	central processing unit, CPU
	a processor would embedded inside a system-on-chop (SoC)
- volatile memory
	volatile memory usually implemented in dynamic RAM (DRAM) chips in discrete packages
	volatile memory is the memory that the processor uses while it's in action	
	its contents are lost when the device powers down
	DRAM memory operates at frequencies close to the processor frequency
	and it needs wide bues in order to keep up with the processor
- nonvolatile memory
	nonvolatile memory is where the embedded device stores data that needs to persist after power to the device is removed
	this memory storage can be in the form of EEPROMS, flash memory, or even SD cards and hard drives
	nonvolatile memory usually contains code for booting as well as stored applciations and saved data
- analog components
	such as resistors, capacitors, and inductors 
- external interfaces
	external interfaces provides the mean sfor the SocC to make connection to the outside world
	the interfaces can be connected to other commerical off-the-shelf (COTS) chips as part of the PCB system interconnect
		- a high-speed bus interface to DRAM 
		* USB and PCI Express (PCIe) are examples of hjigh speed interfaces that connect devieces externally
		- a low-speed interfaces, such as I2C and SPI to a sensor
		
===
miniaturization allows an SoC to have more intellectual property (IP) blocks		
an exmaple of an Intel Skylate SoC
this die contains multiple cores, including the main CPU cores, the Intel Converged Security and Management Engine (CSME), the GPU and much more.
internal buses in an SoC are harder to access than external buses, making SoCs an inconvenient starting point for hacking

SoCs can contain the following IP blocks:
-	several (micro)processor and peripherals
		for instance, an application processor, a crysto engine, a video accelerator, and the I2C interface driver
- volatile memory
		In the form  of DRAM ICs stacked on top of the Soc, SRAMS or register banks
- nonvoltile memory
		- In the form of on-die read-only memory (ROM), one-time proframmable (OTP) fuses, EEPROM, and flash memory
		- OTP fuses typically encode critical chip configuration data, such as identity information, lifecycle stage, and anti-rollback versioning information
- internal buses
		the internal buses could be susceptible to spoofing, sniffing, injection, and all other forms of man-in-the-middle attacks.

software is a structured collection of CPU instructions and data that a processor executes
embedded devices can contain some of the following types of software:
- initial boot code
		- the initial boot code is the set of instructions a processor executes when it's first powered in
		- the initial boot code is generated by the processor manufacturer and stored in ROM
		- the main function of the boot ROM code is to prepare the main processor to run the code that follows
- bootlaoder
		- the bootlaoder initializes the system after the boot ROM executes
		- it is typically stored on nonvolatile but mutable storage, so it can be updated in the field
		- the PCB's original equipment manufacturer (OEM) generates the bootloader, allowing it to initilaized PCD-level components
		- it may also optionally lock down some security features in addition to its primary task of loading and authenticating an operating system or trusted execution environment (TEE)
		- the bootlaoder may provide functionality for provisioning a device or debugging
		- being the earliest mutable code to run on a device, th ebootlaoder is an attractive target to attack, less-secure devices may ahve a boot ROM that doesnt authenticate the bootlaoder, allwoing attacks to repalce the bootladoer code easily
			- bootloaders are authenticated with digital signatures, which are typically verified by embedding a public key )or the hash of a public key) in the booot ROM or fuses, because the public key is hard to modify, it's considered the root of trust.
			- the manufacturer signs the bootloader using the private key associated with the public key, so the boot ROM code can verify and trust that the manufacturer produced it.
			- once the bootloader is trusted, it can, in turn, embed a public key for the next stage of code and provide trust that the next stage is authentic. This chian of trust can extend all the way down to application running on an OS
			- theoretically, creating this chain of trust seems pretty secure, but the scheme is vulnerable to a number of attacks, ranging from exploiting verifivation weaknesses to fault injection, timing attacks, and more
- trusted execution environent (TEE) OS and trusted applcaitions
	- TEE is common in phones and tablets based on systems such as Android.
		- the idea is to create a virtual secure SoC bu paritioning an entire SoC into secure and nnonsecure worlds
		- the goal is to keep all nonsecure and complex opeerations, such as user applcaitions, in the nonsecure world, and all secure operations, such as banking applciation in the secure world
- firmware images
	- firmware is the low-level software that runs on CPUs or peripherals
	- simplle peripherals in a device are often fully hardware based, but more complex peripherials can contain a microcontroller that runs firm ware
- main operating system kernal and appliations
	- the main OS in an embedded system can be a gemeral-purpose OS, like Linux, or a real-time OS, like VxWorks or FreeRTOS.
	
========
### tools
- nmap -p- 10.10.10.142
  - nc -vv 10.10.10.142 8091
    - JSON-RPC
    - curl -X POST --data '{"xyz"}' httpss://10.10.10.142:9810
  - curl httpss://10.10.10.142:9810
- nmap 10.10.10.142
  - Availiable ports
  - ftp 10.10.10.142
    - ftp> get anonymous.txt
  - nc -vz -u 10.10.10.142 30301
- tcpdump -X
- ifconfig
- :set paste
- otool
- xxd
- lldb
- g++ -Os
- g++ -O2

========
# C complilation process
- source.c -> preprocesser -> source.i
  - #include
  - #ifdef
- source.i -> compiler -> source.s
- source.s -> ASM -> source.o
- source.0 -> linker -> source.o
  - Static linker, Other .o file
  - Dynamic linker,  .so, .dylib
  https://www.youtube.com/watch?v=ksJ9bdSX5Yo
  https://www.youtube.com/watch?v=wLq-5lBc7x4









